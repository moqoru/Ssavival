server.port=8084

# MySQL 연결
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# DB Source URL
#spring.datasource.url=jdbc:mysql://k8a602.p.ssafy.io:3307/ssavival?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&serverTimezone=Asia/Seoul
#spring.datasource.url=jdbc:mysql://localhost:3306/jpatest?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&serverTimezone=Asia/Seoul
spring.datasource.url=jdbc:mysql://localhost:3306/ssavival?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&serverTimezone=Asia/Seoul

# DB username

#spring.datasource.username=root
spring.datasource.username=a602

# DB password
#spring.datasource.password=0401
spring.datasource.password=a602a602

#Spring Security 설정
spring.security.user.name=a602
spring.security.user.password=a602a602
#Kakao
spring.security.oauth2.client.registration.kakao.client-id = KAKAO_CLIENT_ID
spring.security.oauth2.client.registration.kakao.client-secret = KAKAO_CLIENT_SECRET
spring.security.oauth2.client.registration.kakao.scope = profile_nickname, account_email
spring.security.oauth2.client.registration.kakao.client-name = Kakao
spring.security.oauth2.client.registration.kakao.authorization-grant-type = authorization_code
spring.security.oauth2.client.registration.kakao.redirect-uri = KAKAO_REDIRECT_URI
spring.security.oauth2.client.registration.kakao.client-authentication-method = POST

spring.security.oauth2.client.provider.kakao.authorization-uri = https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.token-uri = https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri = https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.user-name-attribute = id
# DDL(create, alter, drop) 정의시 DB의 고유 기능을 사용할 수 있다.
# 프로젝트 실행시 자동으로 DDL(create, alter, drop) 을 생성할 것 인지 결정하는 설정
# create : 매번 테이블 생성을 새로 시도한다 / update : 변경이 필요한 경우 alter로 변경되고 테이블이 없는경우 create가 된다
#spring.jpa.hibernate.ddl-auto=create
spring.jpa.hibernate.ddl-auto=none

# JPA의 구현체의 Hibernate가 동작하면서 발생한 SQL의 가독성을 높여준다.
# 실제 JPA 구현체인 Hibernate가 동작하면서 발생하는 SQL을 포맷팅해서 출력한다 -> 실행되는 SQL의 가독성을 높여준다
spring.jpa.properties.hibernate.format_sql=true
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=trace

#s3 설정
cloud.aws.credentials.access-key=ACCESS_KEY
cloud.aws.credentials.secret-key=SECRET_KEY
cloud.aws.region.static=ap-northeast-2
cloud.aws.stack.auto=false
cloud.aws.s3.bucket=ssafy-mmc
cloud.aws.s3.bucket.url=https://s3.ap-northeast-2.amazonaws.com/ssafy-mmc

spring.web.resources.static-locations=classpath:/static/

#redis 설정
#spring.cache.type=redis
#spring.redis.host=127.0.0.1
#spring.redis.port=6379
#spring.cache.redis.cache-null-values=true

#영상 업로드 설정
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
